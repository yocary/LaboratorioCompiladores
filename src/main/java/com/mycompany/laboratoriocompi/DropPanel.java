/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.laboratoriocompi;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author yocary
 */
public class DropPanel extends JPanel implements DropTargetListener {

    /**
     * Creates new form DropPanel
     */
    public DropPanel() {
        super();
        setBorder(BorderFactory.createLineBorder(Color.BLACK));
    setPreferredSize(new Dimension(300, 100));
    
    // Establecer el objeto como un objetivo de "drop"
    new DropTarget(this, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void dragEnter(DropTargetDragEvent dtde) {
        setBackground(Color.green);
    }

    @Override
    public void dragExit(DropTargetEvent dte) {
        setBackground(Color.WHITE);
    }

    @Override
    public void dragOver(DropTargetDragEvent dtde) {
        // No hacemos nada especial
    }

    @Override
    public void drop(DropTargetDropEvent dtde) {
        setBackground(Color.WHITE);

        // Obtener la lista de archivos que se han soltado
        try {
            dtde.acceptDrop(dtde.getDropAction());
            List<File> archivos = (List<File>) dtde.getTransferable().getTransferData(
                    dtde.getTransferable().getTransferDataFlavors()[0]);

            // Realizar operaciones con los archivos
            for (File archivo : archivos) {
                System.out.println("Se ha soltado el archivo: " + archivo.getAbsolutePath());
                leeArchivo(archivo.getAbsolutePath());
               
            }

            dtde.dropComplete(true);
        } catch (Exception e) {
            e.printStackTrace();
            dtde.rejectDrop();
        }
    }
    
    public void leeArchivo(String ruta){
          try {
      // Crea una instancia de BufferedReader para leer el archivo
      BufferedReader lector = new BufferedReader(new FileReader(ruta));
      
      // Lee cada l√≠nea del archivo e imprime su contenido en la consola
      String linea="";
      String contenido="";
      while ((linea = lector.readLine()) != null) {
        //lo que trae el archivo de texto lo almacena en el contenido
          contenido+=linea+"\n";
      }
          // parcer recibe el contenido  y realiza el analisis de la cadena 
        Parser p = new Parser();
        p.analizarCadena(contenido);
        PantallaPrincipal pp = new PantallaPrincipal();
        pp.setArchivo(contenido);
        pp.setTerminales(p.getTerminales());
        pp.setVariables(p.getVariables());
        pp.setProducciones(p.getProducciones());
        pp.setVisible(true);
       
        
      // Cierra el BufferedReader para liberar recursos
      lector.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
    }
    

    @Override
    public void dropActionChanged(DropTargetDragEvent dtde) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
